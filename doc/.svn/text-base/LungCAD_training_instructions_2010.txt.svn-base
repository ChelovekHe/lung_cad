COMANDO DI AVVIO DI training in lung_cad_tools

Il programma prende in input i GT (nel formato MIG) e i risultati di segmentazione e detection.

I positivi sono ottenuti prendendo i centroidi e i diametri dai GT.
I negativi sono ottenuti dai risultati della detection.

Le feature sono calcolate utilizzando la stessa funzione usata nel CAD (si veda libmigfeat)

Scelta dei negativi:
al momento i negativi sono scelti in proporzione NEG_POS_RATIO rispetto ai positivi. La scelta non è random: viene saltato un numero precalcolato di elementi in modo da avere questo rapporto.



training resize_mm lista_cartelle_dicom	path_GT
	path_risultati_CAD prefisso_output


ES WIN LAPTOP GF
D:\MIG\LUNG_C\build>training_d.exe 0.6 d:\MIG\DB\LIDC_NEW\dirlist_all_windows_VERBATIM_fold1.txt D:\data_cad2d\LIDC_NEW\firstgroup_20091001\GT_all\GT_min3\ G:\MIG\trabajo\data\results_fold1\ d:\MIG\trabajo\LUNG_training\fold1_al3_








ALCUNI COMANDI UTILI PER SVM-TRAIN CON IL CAD

DALLA DOCUMENTAZIONE
########################################################################
> svm-train -s 0 -c 5 -t 2 -g 0.5 -e 0.1 data_file 

Train a classifier with RBF kernel exp(-0.5|u-v|^2), C=10, and
stopping tolerance 0.1.

> svm-train -s 3 -p 0.1 -t 0 data_file

Solve SVM regression with linear kernel u'v and epsilon=0.1
in the loss function.

> svm-train -c 10 -w1 1 -w-1 5 data_file

Train a classifier with penalty 10 = 1 * 10 for class 1 and penalty 50
= 5 * 50 for class -1.

> svm-train -s 0 -c 100 -g 0.1 -v 5 data_file

Do five-fold cross validation for the classifier using
the parameters C = 100 and gamma = 0.1

> svm-train -s 0 -b 1 data_file
> svm-predict -b 1 test_file data_file.model output_file

Obtain a model with probability information and predict test data with
probability estimates

##########################################################################

esempio partendo dai valori estrati con il tool training del cad.
Per valutare si può utilizzare la cross validation (tenere presente che
sarebbe meglio crearsene una che tenga in considerazione le 3 direzioni e
soprattutto TPF e FPF, AAAA: il tool grid.py potrebbe essere utile, guardarci)

> svm-train -s 0 -c 100 -v 5 -w1 1 -w0 0.07 D:\MIG\prova_features.dat


Una volta scelto il set di parametri creare il modello in questo modo:
>svm-train -s 0 -c 100 -w1 1 -w0 0.07 D:\MIG\prova_features.dat D:\MIG\prova.model



DAL codice di MIP FPR
TRAINSTRING_BASE = '-s 0 -m 384 -t 2 -c 0.1';%indagare C fra 0.05 e 1

per w0 una rule of thumb può essere fare la cv e considerare il numero di falsi che viene fuori,
per esempio: considerando 300 FP/Pat (quelli generati), e considerando una decina di fp /pat, (ricordarsi cmq delle 3 direzioni) un 97/98 % può andare bene, poi tocca vedere come si comporta con i positivi, potrebbe essere necessario stare più laschi qui.


quella usata oggi (20100628)
svm-train -s 0 -c 0.1 -t 2 -v 5 -w1 1 -w0 0.03 D:\MIG\trabajo\LUNG_training\provaall_features.dat

(feature ottenute su tutti i pat con almeno un nodulo, 300 FP/Pat )

D:\MIG\software\libsvm-2.91\libsvm-2.91\windows>svm-train -s 0 -c 0.1 -t 2 -w1 1 -w0 0.009 D:\MIG\trabajo\LUNG_training\fold1_al3_features.dat d:\MIG\trabajo\data\LIDC_NEW_models_fold1_zer_1to8\fold1_al3_w0_0_009.model

update 20101022: ho ridotto il numero dei falsi quindi valgono le info qui sopra ma si hanno valori utili di w0 attorno a 0.4

es. linux 156 (c'è anche uno script che genera i vari modelli data una lista di w0)

./svm-train -s 0 -c 0.1 -t 2 -w1 1 -w0 0.4 /mnt/WORK/lungcad_work/training_data/LIDC_NEW_all_al3_features.dat /mnt/WORK/lungcad_work/data/models/LIDC_NEW_all_al3_w0_0_4.model

