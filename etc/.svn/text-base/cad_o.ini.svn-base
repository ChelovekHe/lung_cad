;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[log]                                                           ; logging system parameters
logini = "E:\TODOR\trabajo\data\maggiore\cadlog.ini"            ; logging system configuration file

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[general]                                                       ; general setup parameters
dir_out	= "E:\TODOR\trabajo\data\maggiore\results\"             ; where to store results
db_file = "E:\TODOR\trabajo\data\maggiore\maggiore.db"          ; database file
queue_len = 1                                                   ; how many unprocessed entries to read from database file
retry_read = 10                                                 ; polling interval in seconds for unprocessed entries
retry_write = 10                                                ; polling interval in seconds for signaling an entry as processed

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[io]                                                            ; dicom io parameters
dll = "E:\TODOR\trabajo\LUNG\trunk\build\libmigdicom_o.dll"     ; dicom io dll to use
wc = -600                                                       ; dicom loading window center
ww = 1500                                                       ; dicom loading window width
resample = 0                                                    ; shall we resample input stack
target_z_resolution = 0.625                                     ; if resample is 1 use this as target z resolution
dump = 1                                                        ; shall we dump original / resampled stack to a mat file

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[segmentation]                                                  ; segmentation parameters
perform_segmentation = 1                                        ; shall we perform segmentation
dll = "E:\TODOR\trabajo\LUNG\trunk\build\libmigseg_o.dll"       ; segmentation dll to use

[segmentation/threshold]                                        ; segmentation thresholding parameters
filter_inplace = 0                                              ; shall original stack be filtered too
filter = 0                                                      ; filter data slice by slice before performing segmentation
                                                                ; 0 - use no filter
                                                                ; 1 - median cross 3x3
                                                                ; 2 - median cross 5x5
                                                                ; 3 - median box 3x3
                                                                ; 4 - median box 5x5
                                                                ; 5 - tomita 3
                                                                ; 6 - tomita 5
                                                                ; 7 - nagao 5
                                                                ; 8 - nagao 7
g0 = -1000                                                      ; start threshold - Hounsfield Units
g1 = 0                                                          ; end threshold - Hounsfield Units
g2 = -500                                                       ; fallback threshold - Hounsfield Units

[segmentation/lung_separate]                                    ; left - right lung separation parameters
sep_min_area      	= 0
sep_accum_thr_ini 	= 3
sep_accum_thr_size_max  = 0.60

[segmentation/debug]                                            ; segemntation debugging
dump = 63 ;32                                                   ; shall we dump segmentation steps' images

; Segemntation dump values are :
; MIG_SEG_DUMP_PASS1      0X0001
; MIG_SEG_DUMP_PASS2      0X0002 
; MIG_SEG_DUMP_PASS3      0X0004
; MIG_SEG_DUMP_PASS4      0X0008
; MIG_SEG_DUMP_PASS5      0X0010
; MIG_SEG_DUMP_FINAL      0X0020
; Or values to get various segmentation steps. For example to get all passes :
; 0x0001 | 0X0002 | 0X0004 | 0X0008 | 0X0010 | 0X0020 = 
; 1 + 2 + 4 + 8 + 16 + 32 = 63

dir_dump = "E:\TODOR\trabajo\data\maggiore\segmentation\"       ; directory where to dump segementation steps' images

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[detection]                                                     ; detection parameters
perform_detection = 0                                           ; shall we perform detection
dll = "F:\work\campanini\lungsvn\trunk\build\libmigdet_2d_o.dll"          ; detection dll to use

[detection/radial]                                              ; fast radial parameters
radii = { 3.0 , 5.0 , 7.0 , 9.0 }                               ; fast radial list of radii ( in pixels )
is_thr_percent_of_max = 0                                       ; is following threshold parameter interpreted as percentage of maximum fast radial
                                                                ; response or is it a flat threshold
threshold = 0.145                                               ; fast radial response threshold ( percentage or flat )

[detection/sspace]                                              ; scale space parameters
spacing = 0                                                     ; how to calculate sigmas' spacing : 0 geometric , 1 arithmetic progression
increment = 1.0                                                 ; if spacing is 1 this gives the step increment
min_nod_diam = 3.8                                              ; minimum nodule diameters we are looking for ( in mm )
max_nod_diam = 22.0                                             ; maximum nodule diameters we are looking for ( in mm )
threshold = 0.0                                                 ; threshold for local maxima detection

[detection/debug]                                               ; detection debugging
dump = 0                                                        ; shall we dump detection steps' images
dir_dump = "F:\work\campanini\data\detection\"                   ; directory where to dump detection steps' images

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[fpr1]
perform_fpr1 = 0                                                        ; shall we perform fpr1
dll = "F:\work\campanini\lungsvn\trunk\build\libmigfpr_1_o.dll"         ; fpr1 dll to use

delta_tolerance = 7.75                                          ; fpr1 x/y distance tolerance in pixels
max_scan_distance = 3.0                                         ; fpr1 z distance in slices

max_obj_length = 13                                             ; maximum object length along z axis

max_angle_l2  = 72.5                                            ; allowed centroid angle along z for object of z length 2
max_angle_l3  = 66.2                                            ; allowed centroid angle along z for object of z length 3
max_angle_l4  = 66.2                                            ; allowed centroid angle along z for object of z length 4
max_angle_l5  = 66.2                                            ; allowed centroid angle along z for object of z length 5
max_angle_l6  = 52.8                                            ; allowed centroid angle along z for object of z length 6
max_angle_l7  = 38.2                                            ; allowed centroid angle along z for object of z length 7
max_angle_l8  = 38.2                                            ; allowed centroid angle along z for object of z length 8
max_angle_l9  = 38.2                                            ; allowed centroid angle along z for object of z length 9
max_angle_l10 = 16.0                                            ; allowed centroid angle along z for object of z length 10

max_obj_volume_low_l2  = 0.0                                    ; allowed minium volume for objects of length 2
max_obj_volume_low_l3  = 0.0                                    ; allowed minium volume for objects of length 3
max_obj_volume_low_l4  = 0.0                                    ; allowed minium volume for objects of length 4
max_obj_volume_low_l5  = 8.45                                   ; allowed minium volume for objects of length 5
max_obj_volume_low_l6  = 11.5                                   ; allowed minium volume for objects of length 6
max_obj_volume_low_l7  = 40.0                                   ; allowed minium volume for objects of length 7
max_obj_volume_low_l8  = 121.0                                  ; allowed minium volume for objects of length 8
max_obj_volume_low_l9  = 121.0                                  ; allowed minium volume for objects of length 9
max_obj_volume_low_l10 = 219.0                                  ; allowed minium volume for objects of length 10

max_obj_volume_high_l2  = 131.0                                 ; allowed maximum volume for objects of length 2
max_obj_volume_high_l3  = 131.0                                 ; allowed maximum volume for objects of length 3
max_obj_volume_high_l4  = 131.0                                 ; allowed maximum volume for objects of length 4
max_obj_volume_high_l5  = 131.0                                 ; allowed maximum volume for objects of length 5
max_obj_volume_high_l6  = 191.0                                 ; allowed maximum volume for objects of length 6
max_obj_volume_high_l7  = 218.0                                 ; allowed maximum volume for objects of length 7
max_obj_volume_high_l8  = 218.0                                 ; allowed maximum volume for objects of length 8
max_obj_volume_high_l9  = 330.0                                 ; allowed maximum volume for objects of length 9
max_obj_volume_high_l10 = 330.0                                 ; allowed maximum volume for objects of length 10

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[fpr2]
perform_fpr2 = 0                                                ; shall we perform fpr2
dll = "F:\work\campanini\lungsvn\trunk\build\libmigfpr_2_o.dll" ; fpr2 dll to use

svm_model_file = "F:\work\campanini\data\prova.model"            ; libsvm format model file
svm_norm_file  = "F:\work\campanini\data\prova.norm"             ; feature normalization parameters

rotations = 24                                                  ; number of 2d rotations to perform on each 3d object view
resized_len = 19                                                ; resize crops to this side length for classification

min_rot_pos_l2  = 13                            ; min number of rotated views that must have a positive classification label to consider view as positive for this 3d lenght
min_rot_pos_l3  = 13                            ; min number of rotated views that must have a positive classification label to consider view as positive for this 3d lenght
min_rot_pos_l4  = 14                            ; min number of rotated views that must have a positive classification label to consider view as positive for this 3d lenght
min_rot_pos_l5  = 14                            ; min number of rotated views that must have a positive classification label to consider view as positive for this 3d lenght
min_rot_pos_l6  = 14                            ; min number of rotated views that must have a positive classification label to consider view as positive for this 3d lenght
min_rot_pos_l7  = 13                            ; min number of rotated views that must have a positive classification label to consider view as positive for this 3d lenght
min_rot_pos_l8  = 14                            ; min number of rotated views that must have a positive classification label to consider view as positive for this 3d lenght
min_rot_pos_l9  = 14                            ; min number of rotated views that must have a positive classification label to consider view as positive for this 3d lenght
min_rot_pos_l10 = 14                            ; min number of rotated views that must have a positive classification label to consider view as positive for this 3d lenght
min_rot_pos_l11 = 14                            ; min number of rotated views that must have a positive classification label to consider view as positive for this 3d lenght
min_rot_pos_l12 = 14                            ; min number of rotated views that must have a positive classification label to consider view as positive for this 3d lenght
min_rot_pos_l13 = 14                            ; min number of rotated views that must have a positive classification label to consider view as positive for this 3d lenght
min_rot_pos_l14 = 12                            ; min number of rotated views that must have a positive classification label to consider view as positive for this 3d lenght
min_rot_pos_l15 = 11                            ; min number of rotated views that must have a positive classification label to consider view as positive for this 3d lenght

min_pos_views_l2  = 2                           ; minimum number of 2d views composing 3d object that must have had a positive classification to consider 3d object as positive for this length
min_pos_views_l3  = 1                           ; minimum number of 2d views composing 3d object that must have had a positive classification to consider 3d object as positive for this length
min_pos_views_l4  = 1                           ; minimum number of 2d views composing 3d object that must have had a positive classification to consider 3d object as positive for this length
min_pos_views_l5  = 1                           ; minimum number of 2d views composing 3d object that must have had a positive classification to consider 3d object as positive for this length
min_pos_views_l6  = 2                           ; minimum number of 2d views composing 3d object that must have had a positive classification to consider 3d object as positive for this length
min_pos_views_l7  = 4                           ; minimum number of 2d views composing 3d object that must have had a positive classification to consider 3d object as positive for this length
min_pos_views_l8  = 5                           ; minimum number of 2d views composing 3d object that must have had a positive classification to consider 3d object as positive for this length
min_pos_views_l9  = 5                           ; minimum number of 2d views composing 3d object that must have had a positive classification to consider 3d object as positive for this length
min_pos_views_l10 = 5                           ; minimum number of 2d views composing 3d object that must have had a positive classification to consider 3d object as positive for this length
min_pos_views_l11 = 5                           ; minimum number of 2d views composing 3d object that must have had a positive classification to consider 3d object as positive for this length
min_pos_views_l12 = 6                           ; minimum number of 2d views composing 3d object that must have had a positive classification to consider 3d object as positive for this length
min_pos_views_l13 = 7                           ; minimum number of 2d views composing 3d object that must have had a positive classification to consider 3d object as positive for this length
min_pos_views_l14 = 6                           ; minimum number of 2d views composing 3d object that must have had a positive classification to consider 3d object as positive for this length
min_pos_views_l15 = 5                           ; minimum number of 2d views composing 3d object that must have had a positive classification to consider 3d object as positive for this length
